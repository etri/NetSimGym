/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: NetSimProto.proto */

#ifndef PROTOBUF_C_NetSimProto_2eproto__INCLUDED
#define PROTOBUF_C_NetSimProto_2eproto__INCLUDED

#include "protobuf-c/protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "any.pb-c.h"

typedef struct InitMsg InitMsg;
typedef struct ActMsg ActMsg;
typedef struct ObsMsg ObsMsg;
typedef struct PythonMsg PythonMsg;
typedef struct NetSimMsg NetSimMsg;


/* --- enums --- */

typedef enum _IsInit {
  IS_INIT__IsInit_Act = 0,
  IS_INIT__IsInit_Init = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IS_INIT)
} IsInit;

/* --- messages --- */

struct  InitMsg
{
  ProtobufCMessage base;
  float time_step;
  float total_time;
  size_t n_command_name;
  int32_t *command_name;
  size_t n_device_name;
  char **device_name;
  int32_t numofagent;
};
#define INIT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init_msg__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0 }


struct  ActMsg
{
  ProtobufCMessage base;
  int32_t command_name;
  size_t n_values;
  float *values;
  int32_t doneinfo;
};
#define ACT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&act_msg__descriptor) \
    , 0, 0,NULL, 0 }


struct  ObsMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean is_reward;
  char *key_name;
  size_t n_values;
  float *values;
};
#define OBS_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&obs_msg__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL }


struct  PythonMsg
{
  ProtobufCMessage base;
  IsInit is_init;
  size_t n_details;
  Google__Protobuf__Any **details;
  protobuf_c_boolean stop_sim;
};
#define PYTHON_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&python_msg__descriptor) \
    , IS_INIT__IsInit_Act, 0,NULL, 0 }


struct  NetSimMsg
{
  ProtobufCMessage base;
  int32_t key_num;
  size_t n_details;
  Google__Protobuf__Any **details;
  protobuf_c_boolean is_done;
  char *more_info;
};
#define NET_SIM_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&net_sim_msg__descriptor) \
    , 0, 0,NULL, 0, (char *)protobuf_c_empty_string }


/* InitMsg methods */
void   init_msg__init
                     (InitMsg         *message);
size_t init_msg__get_packed_size
                     (const InitMsg   *message);
size_t init_msg__pack
                     (const InitMsg   *message,
                      uint8_t             *out);
size_t init_msg__pack_to_buffer
                     (const InitMsg   *message,
                      ProtobufCBuffer     *buffer);
InitMsg *
       init_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init_msg__free_unpacked
                     (InitMsg *message,
                      ProtobufCAllocator *allocator);
/* ActMsg methods */
void   act_msg__init
                     (ActMsg         *message);
size_t act_msg__get_packed_size
                     (const ActMsg   *message);
size_t act_msg__pack
                     (const ActMsg   *message,
                      uint8_t             *out);
size_t act_msg__pack_to_buffer
                     (const ActMsg   *message,
                      ProtobufCBuffer     *buffer);
ActMsg *
       act_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   act_msg__free_unpacked
                     (ActMsg *message,
                      ProtobufCAllocator *allocator);
/* ObsMsg methods */
void   obs_msg__init
                     (ObsMsg         *message);
size_t obs_msg__get_packed_size
                     (const ObsMsg   *message);
size_t obs_msg__pack
                     (const ObsMsg   *message,
                      uint8_t             *out);
size_t obs_msg__pack_to_buffer
                     (const ObsMsg   *message,
                      ProtobufCBuffer     *buffer);
ObsMsg *
       obs_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   obs_msg__free_unpacked
                     (ObsMsg *message,
                      ProtobufCAllocator *allocator);
/* PythonMsg methods */
void   python_msg__init
                     (PythonMsg         *message);
size_t python_msg__get_packed_size
                     (const PythonMsg   *message);
size_t python_msg__pack
                     (const PythonMsg   *message,
                      uint8_t             *out);
size_t python_msg__pack_to_buffer
                     (const PythonMsg   *message,
                      ProtobufCBuffer     *buffer);
PythonMsg *
       python_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   python_msg__free_unpacked
                     (PythonMsg *message,
                      ProtobufCAllocator *allocator);
/* NetSimMsg methods */
void   net_sim_msg__init
                     (NetSimMsg         *message);
size_t net_sim_msg__get_packed_size
                     (const NetSimMsg   *message);
size_t net_sim_msg__pack
                     (const NetSimMsg   *message,
                      uint8_t             *out);
size_t net_sim_msg__pack_to_buffer
                     (const NetSimMsg   *message,
                      ProtobufCBuffer     *buffer);
NetSimMsg *
       net_sim_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   net_sim_msg__free_unpacked
                     (NetSimMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*InitMsg_Closure)
                 (const InitMsg *message,
                  void *closure_data);
typedef void (*ActMsg_Closure)
                 (const ActMsg *message,
                  void *closure_data);
typedef void (*ObsMsg_Closure)
                 (const ObsMsg *message,
                  void *closure_data);
typedef void (*PythonMsg_Closure)
                 (const PythonMsg *message,
                  void *closure_data);
typedef void (*NetSimMsg_Closure)
                 (const NetSimMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    is_init__descriptor;
extern const ProtobufCMessageDescriptor init_msg__descriptor;
extern const ProtobufCMessageDescriptor act_msg__descriptor;
extern const ProtobufCMessageDescriptor obs_msg__descriptor;
extern const ProtobufCMessageDescriptor python_msg__descriptor;
extern const ProtobufCMessageDescriptor net_sim_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_NetSimProto_2eproto__INCLUDED */
